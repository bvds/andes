/* global define */
define([
    "dojo/_base/lang",
    "dojo/_base/Deferred",  // Need to update to dojo/Deferred
    "dojo",  // For slimy trick to add session ID header
    // pre-AMD version requires:
    "andes/timer",
    "andes/rpc",
    "andes/error",
    "andes/messages"
],function(lang, Deferred, dojo, timer){  // Pre-AMD version had a function wrapper.

    var startTime = null,
        requestInFlight = false,
        queue = [],
        tries = 0;

    var MAX_RETRIES = 5,
        RETRY_TIMEOUT = 2000; // milliseconds

    // AOP-style function replacement that performs before-advice
    // to add to the headers on all XHR requests. See dojox/rpc/Client.js
    (function(){
        console.info("api set headers", window.andes.sessionId);
        window.andes._originalXhr = dojo.xhr;
        dojo.xhr = function(method,args){
            var headers = args.headers = args.headers || {};
            headers["Client-Id"] = window.andes.sessionId;
            return window.andes._originalXhr.apply(dojo, arguments);
        };
    })();

    function prepRequest(req){
        // add common elements to our requests
        var tm = ((new Date()).getTime() - (startTime || (new Date()).getTime()))/1000.0;
        return lang.mixin({ time:tm }, req || {});
    }

    function sendRequest(req){
        // send an RPC request
        var request = prepRequest(req.params);
        requestInFlight = true;
        req.startTime = (new Date()).getTime();
        window.andes.rpc[req.method](request).addCallbacks(
            function(result){
                requestInFlight = false;
                var dt=(new Date()).getTime()-req.startTime;
                // log any server latency larger than cutoff in ms.
                // Should match Andes server timeout.
                if(dt>15000){
                    window.andes.errorLog({
                        title: "latency",
                        message: dt + " ms for " + req.method 
                    });
                }
                req.dfd.callback(result);
                nextRequest();
            },
            function(error){
                //requestInFlight = false;
                if(error._rpcErrorObject){
                    //
                    //        Error returned from server
                    //        This error can be generated by changing
                    //        the RPC action to open-problemo
                    //
                    req.dfd.errback(error);
                    var mo = window.andes.messages.server();
                    var msg = "<p>"+mo.message+"</p><div class='errMsg'>" + error.name + ": " + error.message;
                    if(error._rpcErrorObject.code){
                        msg += "\n(code " + error._rpcErrorObject.code + ")";
                    }
                    msg += "</div><div class='action'>"+mo.action+"</div>";
                    window.andes.error({
                        title: mo.title,
                        message: msg,
                        errorType: window.andes.error.OK
                    });
                }else{
                    //
                    //        This error occurs from a timeout, due to
                    //        service interuption
                    //        Can be generated by changing the SMD URL
                    //
                    if(++tries <= MAX_RETRIES){
                        window.setTimeout(function(){
                            sendRequest(req);
                        }, RETRY_TIMEOUT);
                    }else{
                        req.dfd.errback(error);
                        console.error(error);
                        var momo = window.andes.messages.connection(MAX_RETRIES);
                        console.dir(momo);
                        window.andes.error({
                            title: momo.title,
                            message: momo.message+"<div class='action'>"+momo.action+"</div>",
                            dialogType: window.andes.error.OK
                        });
                    }
                }
            }
        );
    }

    function nextRequest(){
        // process the next request in the queue, if any
        if(!requestInFlight){
            var req = queue.shift();
            if(req){
                tries = 0;
                sendRequest(req);
            }
        }
    }

    function queueRequest(method, params){
        // add a request to the queue for processing when the current
        // pending request (if any) returns
        var dfd = new Deferred();
        queue.push({dfd:dfd, method:method, params:params});
        if(queue.length == 1){
            nextRequest();
        }
        return dfd;
    }

    window.andes.api = {
        open: function(params){
            //console.info("andes.api.open", params);
            startTime = (new Date()).getTime();
            window.andes.timer = new timer(startTime);
            var dfd = queueRequest("open-problem", params);

            dfd.addCallback(function(result){
                // look for help embedded in the returned result, so we can
                // queue it up in case the user opens the Tutor pane
                window.andes.help.processStep(result);
            });
            return dfd;
        },

        step: function(params){
            //console.info("andes.api.step", params);
            var dfd = queueRequest("solution-step", params);
            dfd.addCallback(function(result){
                // look for help embedded in the returned result, so we can
                // queue it up in case the user opens the Tutor pane
                window.andes.help.processStep(result);
            });
            return dfd;
        },

        help: function(params){
            //console.info("andes.api.help", params);
            return queueRequest("seek-help", params);
        },

        suggestWord: function(params){
            //console.info("andes.api.suggestWord", params);
            var dfd = queueRequest("suggest-word", params);
            dfd.addCallback(function(result){
                window.andes.WordTip.processResults(result);
            });
            return dfd;
        },

        recordAction: function(params){
            // Could be implemented as a json-rpc notification;
            queueRequest("record-action", params);
        },

        close: function(params){
            console.info("andes.api.close", params);
            return queueRequest("close-problem", params);
        }
    };

});
